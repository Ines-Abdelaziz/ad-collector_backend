# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import io
from django.shortcuts import render
from hashlib import sha512
from collections import OrderedDict
from .models import  user
from .models import adReason
from .models import hostingVideo
from .models import youtubeAds
from .models import videoAd
from .models import FloatingAd
from .models import index
from django.views.decorators.csrf import csrf_exempt
import django
from django.db.models import Count, Avg

import logging

import json
import unicodedata
#from django.http import JsonResponse
from django.http import HttpResponse
JsonResponse = lambda response: HttpResponse(json.dumps(response), content_type="application/json")
version = django.VERSION
if (version[0] >= 1) and (version[1] >= 7):
    import django.http

    JsonResponse = django.http.JsonResponse

import datetime

# create an instance of logger 
logger = logging.getLogger(__name__)

STATUS = 'status'
FAILURE = 'failure'
SUCCESS = 'success'
REASON = 'reason'
POST_REQUEST = 'this request should be a POST one'
NOT_CONNECTED_USER = 'the user is not connected we don"t handle this'
AD_LINK = 'ad_link'
USER_ID = 'user_id'
TYPE = 'type'
SOMETHING_WRONG = "there were something wrong with your request please review it "




def addReason(data,ads):
    for i in data["ad_reasons"]:
        print('i {}'.format(i))
        chaine = unicodedata.normalize('NFKD', i).encode('ascii', 'ignore')
        id_Reason = sha512(str(chaine).encode('utf-8')).hexdigest()
        reason = adReason(id=id_Reason,title = i)
        reason.save()
        ads.reasons.add(reason)


@csrf_exempt
def store_Data_To_DataBase(request):
    response = {}
    try:

        print ('We entered the function')
        logger.info("Excecuting ")
        print ('We started the function')
            #we test if it's a post request
        if request.method!='POST':
            response[STATUS] = FAILURE
            response[REASON] = POST_REQUEST
            print('there is no post method')
            return JsonResponse(response)
        print('here we go')
        body = request.body.decode('utf-8')
        json_data = json.loads(body)
        print(json_data)
        print('json data {}'.format(json_data["connected"]))

            #we have the user
            #we test first if the user is connected on his gmail account while watching youtube videos
             #we extract the user information
        if json_data["connected"] == False :
            print('hereeeee to encode')
            user_id = sha512(str(json_data["user"]["id"]+json_data["country"]).encode('utf-8')).hexdigest()
            user_name = json_data["user"]["name"]+json_data["country"]
            user_email = json_data["user"]["email"]+json_data["country"]
        else:
            print('json data try again {}'.format(json_data["user"]["id"]))

            user_id = sha512(str(json_data["user"]["id"]).encode('utf-8')).hexdigest()
            user_name = json_data["user"]["name"]
            user_email = json_data["user"]["email"]
        user_country = json_data["country"]
        u = user(id=user_id,
                      user_name= user_name,
                      user_email = user_email,
                      country = user_country
             )
        u.save()
        print ('We saved the user')
        logger.info(' the user is saved')
        indexForUser = index(id = user_id,
                                  user_id = json_data["user"]["id"],
                                  user_name = user_name)
        indexForUser.save()
        print ('We saved the user')
        logger.info(': the index of user is saved')


             #we extract the host video information

        video_name = json_data["host_video"]["name"]
        video_link = json_data["host_video"]["link"]
        video_date = ""
        nbr_vues = "" #json_data["host_video"]["total_views"]
        channel_name = json_data["host_video"]["channel_name"]
        channel_link = json_data["host_video"]["channel_link"]
        channel_img  = json_data["host_video"]["channel_img"]
        nbr_followers = json_data["host_video"]["nbr_followers"]
        channel_description = json_data["host_video"]["channel_description"]

        logger.info(': we extracted the vide host')
        videoHost = hostingVideo(
                    name = video_name,
                    link = video_link,
                    date = video_date,
                    nbr_views =nbr_vues,
                    channel_name =channel_name,
                    channel_link = channel_link,
                    channel_img = channel_img,
                    channel_description = channel_description,
                    nbr_followers = nbr_followers
                    )
        videoHost.save()
        logger.info(' video host is saved')
        u.videos.add(videoHost)
        logger.info(': the video is added to user')
        youtube_kids = json_data["youtubeKids"]
        print ('We saved the video host and we connceted it with the user')
        if json_data["ad_or_not"]==True:
                 #this a video ad
            print('this is a video')
            logger.info(': this is a video ad')
            type_ad ='V'
            link = json_data["ad"]["ad_link"]
            advertiser_name = json_data["ad"]["advertiser_name"]
            ad_channel_description = json_data["ad"]["ad_channel_description"]
            ad_channel_name = json_data["ad"]["ad_channel_name"]
            ad_channel_link = json_data["ad"]["ad_channel_link"]
            ad_channel_img  = json_data["ad"]["ad_channel_img"]
            ad_page_img     = json_data["ad"]["ad_page_img"]
            ad_page_desctiption = json_data["ad"]["ad_page_desctiption"]
            ad_page_link = json_data["ad"]["adevrtiser_link"]
            skeept_or_not = json_data["ad"]["skeept_or_not"]
            advertiser_checked_or_not = json_data["ad"]["checked_or_not"]
            reason_cheked = json_data["ad"]["reason_cheked"]
            channel_cheked = json_data["ad"]["channel_cheked"]
            time = datetime.datetime.now()
            response[AD_LINK] = link
            logger.info(': the ad was saved')
            print ('We cllected a video ad')
            videoAdInstance = videoAd(typeAd = type_ad,
                        time = time,
                        host_video_link = video_link,
                        link = link,
                        advertiser_name = advertiser_name,
                        ad_channel_description = ad_channel_description,
                        ad_channel_name = ad_channel_name,
                        ad_channel_link = ad_channel_link,
                        ad_channel_img  = ad_channel_img,
                        ad_page_img     = ad_page_img,
                        ad_page_desctiption = ad_page_desctiption,
                        ad_page_link = ad_page_link,
                        ad_skeept_or_not = skeept_or_not,
                        advertiser_checked_or_not = advertiser_checked_or_not,
                        reason_cheked = reason_cheked,
                        channel_checked = channel_cheked,
			youtube_kids = youtube_kids
                        )
            videoAdInstance.save()
            videoAdInstance.users.add(u)
            addReason(json_data,videoAdInstance)
            print ('We saved the video Ad')
            logger.info(': the videoAd was saved')

        if json_data["ad_or_not"]==False:
                #this video is a float card
            print ('this is a float card ad')
            response[AD_LINK] = "there is no link"
            type_ad ='F'
            title = json_data["ad_floating"]["title"][0]+' '+json_data["ad_floating"]["title"][1]
            description = json_data["ad_floating"]["description"][0]+' '+json_data["ad_floating"]["description"][1]
            linkToURL = json_data["ad_floating"]["link"]
            link = ""
            for i in linkToURL:
                if i != "":
                    link = i +', '

            img = json_data["ad_floating"]["img"]
            ad_reason_cheked = json_data["ad_floating"]["ad_reason_cheked"]
            ad_removed = json_data["ad_floating"]["ad_removed"]
            time = datetime.datetime.now()
            print('img{}'.format(img))
            print('channel img{}'.format(channel_img))
            floatAd = FloatingAd(typeAd = type_ad,
                    time = time,
                    host_video_link = video_link,
                    title = title,
                    description = description,
                    link = link,
                    img = img,
                    ad_reason_cheked = ad_reason_cheked,
                    ad_removed = ad_removed,
		    youtube_kids = youtube_kids
                )
            floatAd.save()
            floatAd.users.add(u)
            addReason(json_data,floatAd)
            print ('We saved the float ad')

        response[USER_ID] = user_id
        response[TYPE] = type_ad
    except Exception as e:
        response = None
        print (str(e))

    return JsonResponse(response)



def getStatistiqueFromDB(request):
    response = {}
    floatAds = []
    videoAds = []
    userIds = ['2defd756c7e1dcae28af9eff77212a7b3928ad7559d18153f6a7e96ec5b68b5dfc4727a6cb1a7f3c6b10f046c7381f8137f88982989ee7c805009ba0f7d252df','461cacd2c5c4a62738cdcd0593aff4da34633a59bbec3e4d779b9f7ae7864dd8dde8730b83b8d7eb06eb12371fa2b8f84d1850f94004d1c74ed03f75f32a06c7']
    userIds = ['f9207a067be204106ecb39c45f69ecaa3727de20d05d00d2e5fcf0f1498461d6d61508dbc593d0c5bf8f3e4cbe479bc218f5d9ae77f0492cd8bbe3731f18a4f9','c51c34a0b3671333a065f6d48149ce48ae68fa499b3be47aa0809039e549de098a5956fedee5b6f949d652346cea3630195a1d7efea3ea5476cc357bacdbab1c','97b59449645767ac9d99a25b15fa89bb2ba0fe4ebe19163b686787be6180def976575c16e8dc1c6c944ac04d25e7d03015ce39636dbd8648703458e6fafaf70f','85aa4b7146c188263455a7542d7e646007c7c6e40e9e486a7cec8c067709d8915634a4f046a3775278a43dc730a285b8e31faf48209b0080fd8aeaa253ef6954','6c8e84d6fb327511c003498d83f7bdd6e975726b4952067ecd93045f93914feacf9d9568a82c75698996bcab305d63fc488c7aab8a82079a49f4337929ac0175','26be48d6d3336fd296f9936985bca41e08b4aad5f860d391e0511991eb980e8f12a5f01506139fe10b957d39d19d70b84511e12c2dda47d7a4b45204537813c7']
    idReason = '0601c70f8ef7f9c33434516ca651ac1b159a5ba1c86b51d7af4d0d7f3e60b2c84bb301b4d3e6978b27281844db1c10dd8cc89366adb84ea80faf9849d9b90e83'
    videoAdsPersonalised = []
    ads = []
    advertiser = []

    try:
#Video ads stats
        for userId in userIds:
	    videoAds = []
            videoAdsPersonalised = []
            floatAds = []
            adsVideos = videoAd.objects.filter(users=userId,time__gt=datetime.date(2022, 7, 1))
            for adsVideo in adsVideos:
                reasonsToStore = []
                reasons = adsVideo.reasons.all()
                unperson = False
		contextual = False 
                for reason in reasons :
                    if(reason.title not in reasonsToStore ):
                        reasonsToStore.append(reason.title)
                    if (reason.id!=idReason ):
                        unperson = True
		    if  reason.title  == "La vidéo que vous regardez" :
			contextual = True
		if unperson and contextual: 
                    videoAdsPersonalised.append({"title": adsVideo.host_video_link,
						"contextual": contextual,
						"advertiser": adsVideo.ad_page_link,
						"type":""})
                videoAds.append({
                    'ad_page_link': adsVideo.ad_page_link,
 		    'temps' : str(adsVideo.time),
                    'lien de la video': adsVideo.host_video_link,
                    'reasonsToStore' :reasonsToStore,

                })
		if adsVideo.ad_page_link not in advertiser:
		    advertiser.append(adsVideo.ad_page_link) 
            adsVideosAvg = videoAd.objects.filter(users=userId, time__gt=datetime.date(2022, 7, 1)).values_list(
                'host_video_link').annotate(num_pub=Count('id')).aggregate(Avg('num_pub'))



    #Float ads stats
            adsFloats = FloatingAd.objects.filter(users=userId, time__gt=datetime.date(2022, 7, 1))
            for adsFloat in adsFloats:
                reasonsToStore = []
                reasons = adsFloat.reasons.all()
		unperson = False
		contextual = False
                for reason in reasons:
                    if (reason.title not in reasonsToStore):
                        reasonsToStore.append(reason.title)
                    if (reason.id!=idReason):
			unperson = True
		    if  reason.title  == "La vidéo que vous regardez" :
                        contextual = True
		if  unperson and contextual:
                    videoAdsPersonalised.append({"title":adsFloat.host_video_link,
						"contextual":contextual,
						 "advertiser":  adsFloat.link,
                                                "type":""})
                floatAds.append({
                    'ad_page_link': adsFloat.link,
	            'temps' : str(adsVideo.time),
		    'lien de la video': adsFloat.host_video_link,
                    'reasonsToStore': reasonsToStore,
                })
		if adsFloat.link not in advertiser:
                    advertiser.append(adsFloat.link)
            adsFloatsAvg = FloatingAd.objects.filter(users=userId, time__gt=datetime.date(2022, 7, 1)).values_list(
                'host_video_link').annotate(num_pub=Count('id')).aggregate(Avg('num_pub'))

            ads.append({
                'user' : userId,
                'videoAds' : videoAds,
                'NumberOfvideoAds' : len(videoAds),
                'floatAds' : floatAds,
                'NumberOfFloatAds' : len(floatAds),
                'NotPersonalisedVideos' : videoAdsPersonalised,
                'NumNotPersonalisedVideos' : len(videoAdsPersonalised),
		'advertiser' : advertiser


            })
        response['ads'] = ads

    except Exception as e:
        response = None
        print(str(e))

    return JsonResponse(response)
    

def data_general_stat(user_id):
    Chartelement = []
    advertisers = []
    attributes = []
    targeting = []

    try:
    #general statistic
        total_video_ads = videoAd.objects.filter(users=user_id).all().count()
        total_float_ads = FloatingAd.objects.filter(users=user_id).all().count()
        distinct_videos = user.objects.filter(id=user_id).values('videos').distinct().count()
        average_video_ads = videoAd.objects.filter(users=user_id).values_list(
            'host_video_link').annotate(num_pub=Count('id')).aggregate(Avg('num_pub'))
        average_float_ads = FloatingAd.objects.filter(users=user_id).values_list(
            'host_video_link').annotate(num_pub=Count('id')).aggregate(Avg('num_pub'))
	print(total_video_ads,total_float_ads,distinct_videos,average_video_ads,average_float_ads)
    #Chart data
        videos_chart_video = list(videoAd.objects.filter(users=user_id).values('time').annotate(num_videos=Count('host_video_link')).order_by("-time"))[:45]
        videos_chart_float= list(FloatingAd.objects.filter(users=user_id).values('time').annotate(num_videos=Count('host_video_link')).order_by("-time"))[:45]
        videoads_chart= list(videoAd.objects.filter(users=user_id).values('time').annotate(num_videoads=Count('id')).order_by("-time"))[:45]
        float_chart= list(FloatingAd.objects.filter(users=user_id).values('time').annotate(num_floatads=Count('id')).order_by("-time"))[:45]
	print(videos_chart_video,videos_chart_float,videoads_chart,float_chart)
        for element in videos_chart_video:
            nombre_videoads = 0
            nombre_ads = 0
            time = element["time"]
            nombre_videos = element["num_videos"]
            for element2 in videos_chart_float:
                if element2["time"] == time:
                    nombre_videos = max(element2["num_videos"],element["num_videos"])
                    break
            for element3 in videoads_chart:
                if element3["time"] == time:
                    nombre_videoads = element3["num_videoads"]
                    break
            for element4 in float_chart:
                if element4["time"] == time:
                    nombre_ads = nombre_videoads+ element4["num_floatads"]
                    break
            Chartelement.append({
                "period": time.strftime("%Y-%m-%d"),
                "TOTAL_ADS" :nombre_ads,
                "VIDEOS_WATECHED" :nombre_videos,
                "VIDEO_ADS" :nombre_videoads
            })
        if len(videos_chart_video) == 0:
	    for element in videos_chart_float:
           	nombre_videoads = 0
            	nombre_ads = 0
            	time = element["time"]
            	nombre_videos = element["num_videos"]
            	for element3 in videoads_chart:
                    if element3["time"] == time:
                    	nombre_videoads = element3["num_videoads"]
                    	break
            	for element4 in float_chart:
                    if element4["time"] == time:
                    	nombre_ads = nombre_videoads+ element4["num_floatads"]
                    	break
            	Chartelement.append({
                	"period": time.strftime("%Y-%m-%d"),
                	"TOTAL_ADS" :nombre_ads,
                	"VIDEOS_WATECHED" :nombre_videos,
                "VIDEO_ADS" :nombre_videoads
           	 })
	
	print(Chartelement)	
    #advertiser
        advertiserVideos = list(videoAd.objects.filter(users=user_id).exclude(ad_page_link="").values('ad_page_link').annotate(num_ads=Count('id')).order_by(
            "-num_ads"))
        advertiserFloats = list(FloatingAd.objects.filter(users=user_id).exclude(link="").values('link').annotate(num_ads=Count('id')).order_by(
            "-num_ads"))
        dic = OrderedDict()
        for advertiserV in advertiserVideos:
            dic[advertiserV["ad_page_link"]] = advertiserV["num_ads"]
        for advertiserF in advertiserFloats:
            if advertiserF["ad_page_link"] in dic :
                dic[advertiserF["ad_page_link"]] += advertiserF["num_ads"]
            else : dic[advertiserF["ad_page_link"]] = advertiserF["num_ads"]

        dic_ordered = OrderedDict(sorted(dic.items(), key=lambda x: x[1], reverse=True))
	i = 1
	for key in dic_ordered:
            advertisers.append({
                "advertiser" : key,
                "num_ads" : dic_ordered[key]
            })
	    i+=1
   	    if i > 5 : break
#        print ('We have the advertiser',advertisers)
        #attributes
        data_dict = {}
        with io.open('./StoreToDB/attributes_targeting.json', encoding='utf_8') as json_data:
            data_dict = json.load(json_data) 
        print ('We oened the file')        
        print ('We finished the transfo ') 

        attriVideos = list(videoAd.objects.filter(users=user_id).values('reasons__title').annotate(
            num_ads=Count('id')).order_by("-num_ads"))
        attriFloat = list(FloatingAd.objects.filter(users=user_id).values('reasons__title').annotate(num_ads=Count('id')).order_by("-num_ads"))


        dicAttribute = OrderedDict()
        for att in attriVideos:
            if att["reasons__title"] in data_dict and data_dict[att["reasons__title"]]!="None" :
                dicAttribute[data_dict[att["reasons__title"]]] = att["num_ads"]
            else : print("not found",att["reasons__title"])
        for attF in attriFloat:
            if attF["reasons__title"] in data_dict and data_dict[attF["reasons__title"]]!="None":
                if data_dict[attF["reasons__title"]] in dicAttribute:
                    dicAttribute[data_dict[attF["reasons__title"]]] += attF["num_ads"]
                else :
                    dicAttribute[data_dict[attF["reasons__title"]]] = attF["num_ads"]
            else: print("not found",attF["reasons__title"])


        dicAttribute = OrderedDict(sorted(dicAttribute.items(), key=lambda x: x[1], reverse=True))
        i = 1 
       # print(dicFinal)
        for key in dicAttribute:
            if key != "None":
                attributes.append({
                    "attribute": key,
                    "num_ads": dicAttribute[key]
                })
	    i+=1
            if i > 5 : break
        print(attributes)

    #targeting tyqes
        data_dict = {}
        with io.open('./StoreToDB/targeting_ty.json', encoding='utf_8') as json_data:
            data_dict = json.load(json_data)

        dicAttribute = OrderedDict()
        for att in attriVideos:
            if att["reasons__title"] in data_dict :
                dicAttribute[data_dict[att["reasons__title"]]] = att["num_ads"]
            else:
                print("not found", att["reasons__title"])
        for attF in attriFloat:
            if attF["reasons__title"] in data_dict :
                if data_dict[attF["reasons__title"]] in dicAttribute:
                    dicAttribute[data_dict[attF["reasons__title"]]] += attF["num_ads"]
                else:
                    dicAttribute[data_dict[attF["reasons__title"]]] = attF["num_ads"]
            else:
                print("not found", attF["reasons__title"])

        dicAttribute = OrderedDict(sorted(dicAttribute.items(), key=lambda x: x[1], reverse=True))
	i = 1
        for key in dicAttribute:
            if key != "None":
                targeting.append({
                    "attribute": key,
                    "num_ads": dicAttribute[key]
                })
            i+=1
            if  i > 5 : break
	if average_video_ads['num_pub__avg'] == None and average_float_ads['num_pub__avg'] != None : average = average_float_ads['num_pub__avg']
	if average_video_ads['num_pub__avg'] != None and average_float_ads['num_pub__avg'] == None : average = average_video_ads['num_pub__avg']
	if  average_video_ads['num_pub__avg'] == None and average_float_ads['num_pub__avg'] == None : average = 0 
	if  average_video_ads['num_pub__avg'] != None and average_float_ads['num_pub__avg'] != None : average = round((average_video_ads['num_pub__avg']+average_float_ads['num_pub__avg'])/2)	
	
        response={
                'total_video_ads': total_video_ads,
                'total_ads': total_float_ads+total_video_ads,
                'distinct_videos': distinct_videos,
                'average_ads_videos': average,
                'chartData' : Chartelement,
                'advertisers' : advertisers,
                'attributes' : attributes,
                'targeting' : targeting
            }

	print(response)	
    except Exception as e:
        response = None
        print(str(e))


    return  response

def data_all_ads(user_id):
    advertisers = []
    targetings = []
    ads = []
    try:
        data_dict = {}
        with io.open('./StoreToDB/targeting_ty.json', encoding='utf_8') as json_data:
            data_dict = json.load(json_data)

        Videoads = videoAd.objects.filter(users=user_id).order_by("-time")
        Floatads = FloatingAd.objects.filter(users=user_id).order_by("-time")

        advertisers.append('None')
        targetings.append('None')
        for videoad in Videoads:
            targets = []
            if videoad.ad_page_link != "":

                if videoad.ad_page_link not in advertisers :
                    advertisers.append(videoad.ad_page_link if len(videoad.ad_page_link) < 20 else videoad.ad_page_link+"...")
                for reason in videoad.reasons.all():
                    if reason.title in data_dict:
                        typeOfTargeting = data_dict[reason.title]
                        if typeOfTargeting not in targets and len(targets) < 2  :
                            targets.append(typeOfTargeting)
                        if typeOfTargeting not in targetings  :
                            targetings.append(typeOfTargeting)
                    else: print("not found"+reason.title)

                ads.append({
                    "tyqe": "Video Ad",
                    "id": videoad.id,
                    "advertiser": videoad.ad_page_link if len(videoad.ad_page_link) < 20 else videoad.ad_page_link[0:20]+"...",
                    "video_watched": videoad.host_video_link,
                    "when": videoad.time.strftime("%d/%m/%Y"),
                    "Reason_why": targets
                })
        for flaotad in Floatads:
            targets = []
            if flaotad.link != "" or flaotad.img != "" :
                if flaotad.link not in advertisers and flaotad.link !="":
                    advertisers.append(flaotad.link if len(flaotad.link)<20 else flaotad.link[0:20]+"...")
		if flaotad.link== "" and flaotad.img != "" and flaotad.img not in advertisers:
		    advertisers.append(flaotad.img if len(flaotad.img)<20 else flaotad.img[0:20]+"...")
                for reason in flaotad.reasons.all():
                    if reason.title in data_dict:
                        typeOfTargeting = data_dict[reason.title]
                        if typeOfTargeting not in targets and len(targets) < 2  :
                            targets.append(typeOfTargeting)
                        if typeOfTargeting not in targetings  :
                            targetings.append(typeOfTargeting)
                    else: print("not found"+reason.title)
		if flaotad.link != "": 
			if  len(flaotad.link)>20 : advert = flaotad.link[0:20]+"..."
			else : advert = flaotad.link
		else: advert = flaotad.img[0:20]+'...'
                ads.append({
                    "tyqe": "Float Ad",
                    "id": flaotad.id,
                    "advertiser": advert,
                    "video_watched": flaotad.host_video_link,
                    "when": flaotad.time.strftime("%d/%m/%Y"),
                    "Reason_why": targets
                })

        response = {
            "ads":ads,
            "advertisers":advertisers,
            "targetings":targetings,
        }

        print(response)
    except Exception as e:
        response = None
        print(str(e))
    return response

        

        


